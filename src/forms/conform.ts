import { getConfig } from "../config";

export const generateConformForm = () => {
  const runtimeDependency = getConfig().get("runtimeDependency") || "@remix-run/node";
  return [
    'import { getFormProps, useForm } from "@conform-to/react";',
    'import { getZodConstraint, parseWithZod } from "@conform-to/zod";',
    'import { Form, useActionData } from "@remix-run/react";',
    `import { json } from "${runtimeDependency}";`,
    `import type { ActionFunctionArgs } from "${runtimeDependency}";`,
    'import { z } from "zod";',
    "",
    "const schema = z.object({",
    "  // Add your schema here",
    "});",
    "",
    "export async function action({ request }: ActionFunctionArgs) {",
    "  const formData = await request.formData();",
    "  const submission = parseWithZod(formData, { schema });",
    "",
    '  if (submission.status !== "success") {',
    "    return submission.reply();",
    "  }",
    "",
    "  // Do something with the data",
    "  return json(submission);",
    "}",
    "",
    "export default function FormRoute() {",
    "  const lastResult = useActionData<typeof action>();",
    "  const [form, fields] = useForm({",
    "    lastResult,",
    "    constraint: getZodConstraint(schema),",
    "    onValidate({ formData }) {",
    "      return parseWithZod(formData, { schema });",
    "    },",
    "  });",
    "",
    "  return (",
    '    <Form method="post" {...getFormProps(form)}>',
    "      <div id={form.errorId}>{form.errors}</div>",
    "",
    "      {/** Your form elements here */}",
    "      <button>Submit</button>",
    "    </Form>",
    "  );",
    "}",
  ].join("\n");
};
